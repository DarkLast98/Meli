plugins {
	id 'org.springframework.boot' version '2.5.4' apply false
  id 'war'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

// group = 'com.meli'
// version = '0.0.1-SNAPSHOT'
// sourceCompatibility = '11'

configurations {
	 invoker
}

repositories {
	jcenter()
	mavenCentral()
}

ext {
	set('springCloudGcpVersion', "2.0.4")
	set('springCloudVersion', "2020.0.3")
}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.slf4j') {
			details.useVersion '1.7.20'
		}
	}
}

dependencies {
  providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-storage'
	implementation 'com.google.cloud.functions:functions-framework-api:1.0.4'

	// Every function needs this dependency to get the Functions Framework API.
	compileOnly "org.projectlombok:lombok", "com.google.cloud.functions:functions-framework-api:1.0.4"

	// To run function locally using Functions Framework's local invoker
	invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.0.2'

	// These dependencies are only used by the tests.
	testImplementation 'com.google.cloud.functions:functions-framework-api:1.0.4'
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'com.google.truth:truth:1.1.3'
	testImplementation 'org.mockito:mockito-core:3.4.0'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
    mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// Register a "runFunction" task to run the function locally
tasks.register("runFunction", JavaExec) {
  main = 'com.google.cloud.functions.invoker.runner.Invoker'
  classpath(configurations.invoker)
  inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
  args(
    '--target', project.findProperty('run.functionTarget') ?: '',
    '--port', project.findProperty('run.port') ?: 8080
  )
  doFirst {
    args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
  }
}

test {
	useJUnitPlatform()
}

jar {
    enabled true
}
