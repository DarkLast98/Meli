plugins {
	//id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'meli'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	jcenter()
	mavenCentral()
}

configurations {
    invoker
}


ext {
	set('springCloudGcpVersion', "2.0.4")
	set('springCloudVersion', "2020.0.3")
}

dependencies {
  compileOnly 'com.google.cloud.functions:functions-framework-api:1.0.4'

  implementation 'com.google.cloud:spring-cloud-gcp-starter'

  // To run function locally using Functions Framework's local invoker
  invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.0.2'
  // [END functions_gradle_add_dependencies]
  // [END functions_example_pom_dependencies]

  // These dependencies are only used by the tests.
  testImplementation 'com.google.cloud.functions:functions-framework-api:1.0.4'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'com.google.truth:truth:1.1.3'
  testImplementation 'org.mockito:mockito-core:3.4.0'
  //testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.register("runFunction", JavaExec) {
  main = 'com.google.cloud.functions.invoker.runner.Invoker'
  classpath(configurations.invoker)
  inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
  args(
    '--target', project.findProperty('run.functionTarget') ?: '',
    '--port', project.findProperty('run.port') ?: 8080
  )
  doFirst {
    args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
  }
}

dependencyManagement {
	imports {
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}
